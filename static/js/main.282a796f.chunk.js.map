{"version":3,"sources":["components/CourseForm.js","components/CourseList.js","App.js","reportWebVitals.js","index.js"],"names":["CourseForm","props","onSubmit","addCourse","type","value","current","onChange","updateCourse","CourseList","state","isEdit","toggleState","setState","renderCourse","details","name","onClick","deleteCourse","index","e","preventDefault","editCourse","myinput","renderForm","defaultValue","ref","v","Fragment","this","Component","App","courses","read_cookie","target","bake_cookie","length","push","splice","courseList","map","course","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wMAWeA,EATI,SAACC,GACjB,OACG,uBAAMC,SAAUD,EAAME,UAAtB,UACG,uBAAOC,KAAK,OAAOC,MAAOJ,EAAMK,QAASC,SAAUN,EAAMO,eACzD,wBAAQJ,KAAK,SAAb,qBCwEMK,E,4MA3EZC,MAAQ,CACLC,QAAQ,G,EAKXC,YAAc,WACX,IAAMD,EAAW,EAAKD,MAAhBC,OACN,EAAKE,SAAS,CACXF,QAASA,K,EAIfG,aAAe,WACZ,OACG,+BACG,+BAAO,EAAKb,MAAMc,QAAQC,OAC1B,wBACGC,QAAS,WACN,EAAKL,eAFX,kBAOA,wBACGK,QAAS,WACN,EAAKhB,MAAMiB,aAAa,EAAKjB,MAAMkB,QAFzC,wB,EAWTX,aAAe,SAACY,GACbA,EAAEC,iBAIF,EAAKpB,MAAMqB,WAAW,EAAKrB,MAAMkB,MAAO,EAAKI,QAAQlB,OACrD,EAAKO,e,EAWRY,WAAa,WACV,OACG,uBAAMtB,SAAU,EAAKM,aAArB,UAIG,uBACGJ,KAAK,OACLqB,aAAc,EAAKxB,MAAMc,QAAQC,KACjCU,IAAK,SAACC,GACH,EAAKJ,QAAUI,KAGrB,wBAAQvB,KAAK,SAAb,wB,4CAKT,WACG,OAAO,cAAC,IAAMwB,SAAP,UAAiBC,KAAKnB,MAAMC,OAASkB,KAAKf,eAAiBe,KAAKL,mB,GAxEpDM,a,OCsEVC,E,4MAnEZrB,MAAQ,CACLsB,QAASC,sBAAY,WACrB3B,QAAS,I,EAIZE,aAAe,SAACY,GACb,EAAKP,SAAS,CACXP,QAASc,EAAEc,OAAO7B,QAErB8B,sBAAY,UAAW,EAAKzB,MAAMsB,U,EAIrC7B,UAAY,SAACiB,GACVA,EAAEC,iBACF,IAAMW,EAAY,EAAKtB,MAAjBsB,QACA1B,EAAY,EAAKI,MAAjBJ,QACN,KAAIA,EAAQ8B,OAAS,GAQlB,OAAO,KAPPJ,EAAQK,KAAK,CAAErB,KAAMV,IACrB,EAAKO,SAAS,CACXmB,UACA1B,QAAS,KAEZ6B,sBAAY,UAAW,EAAKzB,MAAMsB,U,EAMxCd,aAAe,SAACC,GACb,IAAMa,EAAY,EAAKtB,MAAjBsB,QACNA,EAAQM,OAAOnB,EAAO,GACtB,EAAKN,SAAS,CAAEmB,YAChBG,sBAAY,UAAW,EAAKzB,MAAMsB,U,EAGrCV,WAAa,SAACH,EAAOd,GACA,EAAKK,MAAjBsB,QACeb,GACf,KAAWd,EACjB8B,sBAAY,UAAW,EAAKzB,MAAMsB,U,4CAGrC,WAAU,IAAD,OACEA,EAAYH,KAAKnB,MAAjBsB,QACFO,EAC2B,IAA9BV,KAAKnB,MAAMsB,QAAQI,OAChB,mDAEAJ,EAAQQ,KAAI,SAACC,EAAQtB,GAClB,OAAO,cAAC,EAAD,CAAYA,MAAOA,EAAOD,aAAc,EAAKA,aAAcH,QAAS0B,EAAoBnB,WAAY,EAAKA,YAAxBH,MAIjG,OACG,0BAASuB,UAAU,MAAnB,UACG,4CACA,cAAC,EAAD,CAAYvC,UAAW0B,KAAK1B,UAAWK,aAAcqB,KAAKrB,aAAcF,QAASuB,KAAKnB,MAAMJ,UAC5F,6BAAKiC,W,GA5DCT,aCQHa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.282a796f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CourseForm = (props) => {\r\n   return (\r\n      <form onSubmit={props.addCourse}>\r\n         <input type=\"text\" value={props.current} onChange={props.updateCourse}></input>\r\n         <button type=\"submit\">Add</button>\r\n      </form>\r\n   );\r\n};\r\n\r\nexport default CourseForm;\r\n","import React, { Component } from 'react';\r\n\r\nclass CourseList extends Component {\r\n   state = {\r\n      isEdit: true,\r\n      // solution 1 part 1 get input value and pass it to editcourse\r\n      // liveValue: '',\r\n   };\r\n\r\n   toggleState = () => {\r\n      let { isEdit } = this.state;\r\n      this.setState({\r\n         isEdit: !isEdit,\r\n      });\r\n   };\r\n\r\n   renderCourse = () => {\r\n      return (\r\n         <li>\r\n            <span>{this.props.details.name}</span>\r\n            <button\r\n               onClick={() => {\r\n                  this.toggleState();\r\n               }}\r\n            >\r\n               edit\r\n            </button>\r\n            <button\r\n               onClick={() => {\r\n                  this.props.deleteCourse(this.props.index);\r\n               }}\r\n            >\r\n               delete\r\n            </button>\r\n         </li>\r\n      );\r\n   };\r\n\r\n   updateCourse = (e) => {\r\n      e.preventDefault();\r\n      // solution 1 part 4 get input value and pass it to editcourse\r\n      // this.props.editCourse(this.props.index, this.state.liveValue);\r\n      // solution 2 part 2 get input value and pass it to editcourse\r\n      this.props.editCourse(this.props.index, this.myinput.value);\r\n      this.toggleState();\r\n   };\r\n\r\n   // solution 1 part 2 get input value and pass it to editcourse\r\n   // handelChange = (e) => {\r\n   //    this.setState({\r\n   //       ...this.state,\r\n   //       liveValue: e.target.value,\r\n   //    });\r\n   // };\r\n\r\n   renderForm = () => {\r\n      return (\r\n         <form onSubmit={this.updateCourse}>\r\n            {/* solution 1 part 3 get input value and pass it to editcourse  */}\r\n            {/* <input type=\"text\" defaultValue={this.props.details.name} onChange={this.handelChange} /> */}\r\n            {/* solution 2 part 1 get input value and pass it to editcourse */}\r\n            <input\r\n               type=\"text\"\r\n               defaultValue={this.props.details.name}\r\n               ref={(v) => {\r\n                  this.myinput = v;\r\n               }}\r\n            />\r\n            <button type=\"submit\">update</button>\r\n         </form>\r\n      );\r\n   };\r\n\r\n   render() {\r\n      return <React.Fragment>{this.state.isEdit ? this.renderCourse() : this.renderForm()}</React.Fragment>;\r\n   }\r\n}\r\n\r\nexport default CourseList;\r\n","import React, { Component } from 'react';\nimport CourseForm from './components/CourseForm';\nimport CourseList from './components/CourseList';\nimport { bake_cookie, read_cookie } from 'sfcookies';\nclass App extends Component {\n   state = {\n      courses: read_cookie('courses'),\n      current: '',\n   };\n\n   // updatecurse in current value\n   updateCourse = (e) => {\n      this.setState({\n         current: e.target.value,\n      });\n      bake_cookie('courses', this.state.courses);\n   };\n\n   // add course\n   addCourse = (e) => {\n      e.preventDefault();\n      let { courses } = this.state;\n      let { current } = this.state;\n      if (current.length > 0) {\n         courses.push({ name: current });\n         this.setState({\n            courses,\n            current: '',\n         });\n         bake_cookie('courses', this.state.courses);\n      } else {\n         return null;\n      }\n   };\n\n   deleteCourse = (index) => {\n      let { courses } = this.state;\n      courses.splice(index, 1);\n      this.setState({ courses });\n      bake_cookie('courses', this.state.courses);\n   };\n\n   editCourse = (index, value) => {\n      let { courses } = this.state;\n      let course = courses[index];\n      course['name'] = value;\n      bake_cookie('courses', this.state.courses);\n   };\n\n   render() {\n      const { courses } = this.state;\n      const courseList =\n         this.state.courses.length === 0 ? (\n            <p>courses list empty</p>\n         ) : (\n            courses.map((course, index) => {\n               return <CourseList index={index} deleteCourse={this.deleteCourse} details={course} key={index} editCourse={this.editCourse} />;\n            })\n         );\n\n      return (\n         <section className=\"App\">\n            <h2>Add Course</h2>\n            <CourseForm addCourse={this.addCourse} updateCourse={this.updateCourse} current={this.state.current} />\n            <ul>{courseList}</ul>\n            {/* form */}\n            {/* list */}\n         </section>\n      );\n   }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}